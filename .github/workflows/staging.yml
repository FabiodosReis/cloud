name: staging

on:
  workflow_dispatch:

jobs:
  pipeline-production:
    name: Build and Deploy
    runs-on: ubuntu-latest
    env:
      JAVA_VERSION: '21'
      ECS_CLUSTER_NAME: 'cluster_$REPO_NAME'
      ECS_TASK_DEF_NAME: 'taskdef_$REPO_NAME'
      ECS_CONTAINER_NAME: 'container_$REPO_NAME'
      ECS_SERVICE_NAME: 'service_$REPO_NAME'
      ECR_REPOSITORY_NAME: 'repository_$REPO_NAME'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TERRAFORM_USER }}
          aws-secret-access-key: ${{ secrets.TERRAFORM_KEY }}
          aws-region: ${{ secrets.TERRAFORM_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.2

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'adopt'

      - name: define project name
        run: |
          echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV
          echo "Nome do projeto: $REPO_NAME"

      - name: Run terraform ECR
        id: terraform-infra-ecr
        run: |
          if aws ecr describe-repositories --repository-names "${{ env.ECR_REPOSITORY_NAME }}" 2>/dev/null; then
            echo "Repositório já existe"
          else
            cd terraform/modules/01-ecr
            terraform init
            terraform apply -auto-approve -var="project=$REPO_NAME"
          fi

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build Project
        run: mvn clean install -DskipTests

      - name: Build, Tag and Push image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Create ECS AWS structure
        id: create-ecs
        env:
          AWS_REGION: ${{ secrets.TERRAFORM_REGION }}
        run: |
          cd terraform/modules/02-ecs
          terraform init
          terraform apply -auto-approve -var="project=$REPO_NAME" -var="ecr_image=${{ steps.build-image.outputs.image }}"

      - name: Download Task Definition
        run: |
          aws ecs describe-task-definition --task-definition "${{ env.ECS_TASK_DEF_NAME }} --query taskDefinition > task-definition.json

      - name: Fill new image id in task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.ECS_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image  }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true