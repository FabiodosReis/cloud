name: staging

on:
  workflow_dispatch:

jobs:
  pipeline-staging:
    name: Build and Deploy
    runs-on: ubuntu-latest
    env:
      JAVA_VERSION: '21'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.TERRAFORM_USER }}
          aws-secret-access-key: ${{ secrets.TERRAFORM_KEY }}
          aws-region: ${{ secrets.TERRAFORM_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.2 # versão estável mais recente

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      # Definição de variáveis globais para todos os steps seguintes
      - name: Define repository vars
        run: |
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "ECR_REPOSITORY_NAME=repository_${REPO_NAME}" >> $GITHUB_ENV
          echo "ECS_CLUSTER_NAME=cluster_${REPO_NAME}" >> $GITHUB_ENV
          echo "ECS_TASK_DEF_NAME=taskdef_${REPO_NAME}" >> $GITHUB_ENV
          echo "ECS_CONTAINER_NAME=container_${REPO_NAME}" >> $GITHUB_ENV
          echo "ECS_SERVICE_NAME=service_${REPO_NAME}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Run terraform ECR
        run: |
          if aws ecr describe-repositories --repository-names "$ECR_REPOSITORY_NAME" 2>/dev/null; then
            echo "Repositório já existe"
          else
            cd terraform/modules/01-ecr
            terraform init
            terraform apply -auto-approve \
              -var="project=$REPO_NAME"
          fi

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Project (Maven)
        run: mvn clean install -DskipTests

      - name: Build, Tag and Push image to ECR
        id: build-image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY_NAME:$IMAGE_TAG .
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY_NAME:$IMAGE_TAG
          echo "image=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Create ECS AWS structure
        run: |
          cd terraform/modules/02-ecs
          terraform init
          terraform apply -auto-approve \
            -var="project=$REPO_NAME" \
            -var="ecr_image=${{ steps.build-image.outputs.image }}"

      - name: Download Task Definition
        run: |
          aws ecs describe-task-definition \
            --task-definition "$ECS_TASK_DEF_NAME" \
            --query taskDefinition > task-definition.json

      - name: Fill new image id in task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.ECS_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
